Extended Backus-Naur-Form (EBNF) of MIN
---------------------------------------

letter          = 'a' | ... | 'z' | 'A' | ... | 'Z' ;
digit           = '0' | ... | '9' ;
rel-op          = '==' | '!=' | '<' | '>' | '<=' | '>=' ;
str-op          = '==' | '!=' ;
add-op          = '+'  | '-' ;
mul-op          = '*'  | '/' ;
number          = digit, { digit } ;
identifier      = letter, { letter | digit | '_' } ;
whitespace      = ' ' | '\r' | '\t' | ':' | ';' ;
character       = ? any ASCII character ? ;

file            = { statement }, { NEWLINE }, ENDMARKER ;
statement       = { NEWLINE }, ? OKDENT ?, simple-line | compound-stmt ;
simple-line     = simple-stmt, { simple-stmt }, NEWLINE ;

simple-stmt     = 'print', expr-list
                | 'break'
                | 'return', [ expr ]
                | identifier, '(', [ expr-list ], ')'           (* sub call *)
                | identifier, '=', expr ;                       (* assignment *)

compound-stmt   = 'if', bool-expr, block,
                  { { NEWLINE }, ? OKDENT ?, 'elif', block },
                  [ { NEWLINE }, ? OKDENT ?, 'else', block ]
                | 'while', bool-expr, block
                | 'def', ? NODENT ?, identifier, '(', [ param-list ], ')', block ;

block           = NEWLINE, ? INDENT ?, statement, { statement }, ? DEDENT ?
                | simple-line ;

expr            = array-expr | math-expr ;
expr-list       = expr, { ',', expr } ;
param-list  		= [ '&' ], identifier, { ',', [ '&' ], identifier } ;

array           = '[', [ math-expr, { ',', math-expr } ], ']'   (* returns int[] *)
                | '"', {character}, '"'                         (* returns chr[] *)
                | 'str', '(', math-expr, ')'                    (* returns chr[] *)
                | 'input', '(', ')'                             (* returns chr[] *)             
                | identifier, '(', [ expr-list ], ')'
                | identifier
                | array, '[', math-expr, '..', math-expr, ']' ; (* array slicing *)
array-expr      = array { '+' array } ;                         (* concatenation *)

math-factor     = '(', math-expr, ')'
                | number
                | "'", character, "'"
                | 'key', '(', ')'
                | 'int', '(', string-expr, ')'
                | 'len', '(', array-expr, ')'
                | 'random', '(', ')'
                | identifier '(', [ expr-list ], ')'
                | identifier
                | array, '[', math-expr, ']' ;                  (* element access *)
math-term       = math-factor, { mul-op, math-factor } ;
math-expr       = [ add-op ], math-term { add-op, math-term } ;

bool-factor     = [ 'not' ], math-expr, [ rel-op, math-expr ]
                | [ 'not' ], array-expr, [ str-op, array-expr ] ;
bool-term       = bool-factor, { 'and', bool-factor } ;
bool-expr       = bool-term, { 'or', bool-term } ;

Copyright 2022 Carsten Herting (slu4)

LICENSING INFORMATION
This file is part of MIN. MIN is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software Foundation, either
version 3 of the License, or (at your option) any later version.
MIN is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
License for more details. You should have received a copy of the GNU General Public License along
with this program. If not, see https://www.gnu.org/licenses/.
